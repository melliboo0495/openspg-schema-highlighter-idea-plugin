// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Schema.flex

package org.openspg.idea.lang.lexer;

import com.intellij.psi.tree.IElementType;

/* Auto generated File */

public class SchemaLexer implements com.intellij.lexer.FlexLexer, org.openspg.idea.grammar.psi.SchemaTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LINE_START_STATE = 2;
  public static final int BLOCK_STATE = 4;
  public static final int PLAIN_BLOCK_STATE = 6;
  public static final int NAMESPACE_STATE = 8;
  public static final int ENTITY_STATE = 10;
  public static final int META_STATE = 12;
  public static final int ATTR_STATE = 14;
  public static final int ATTRMETA_STATE = 16;
  public static final int SUBPROP_STATE = 18;
  public static final int SUBPROPMETA_STATE = 20;
  public static final int LEVEL_ERROR = 22;
  public static final int WAITING_ENTITY_ALIAS_NAME_STATE = 24;
  public static final int WAITING_ENTITY_TYPE_STATE = 26;
  public static final int WAITING_METAINFO_VALUE_STATE = 28;
  public static final int WAITING_ATTR_ALIAS_NAME_STATE = 30;
  public static final int WAITING_ATTR_TYPE_STATE = 32;
  public static final int WAITING_SUBPROP_TYPE_STATE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     5,  5,  7,  7,  5,  5,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 
    13, 13, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\25\0\1\1\1\0\1\3\1\4"+
    "\3\0\1\5\1\6\1\7\3\0\1\10\2\0\12\11"+
    "\1\12\3\0\1\13\2\0\2\14\1\15\1\14\1\16"+
    "\1\17\2\14\1\20\6\14\1\21\3\14\1\22\6\14"+
    "\1\23\1\24\1\25\3\0\1\26\1\14\1\27\1\30"+
    "\1\31\1\14\1\32\1\33\1\34\2\14\1\35\1\36"+
    "\1\37\1\40\1\41\1\14\1\42\1\43\1\44\1\45"+
    "\1\46\1\14\1\47\1\50\1\14\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\1\1\3\1\4\1\5\1\3"+
    "\1\4\1\6\1\0\1\7\1\0\2\10\3\11\1\12"+
    "\1\13\7\11\1\14\2\0\1\15\1\16\2\11\1\17"+
    "\1\20\1\11\1\21\1\22\2\11\3\23\2\11\1\3"+
    "\3\11\1\24\1\25\2\11\4\26\2\11\4\27\1\0"+
    "\1\30\1\10\1\0\2\10\1\0\1\12\2\0\1\12"+
    "\7\0\1\14\2\0\1\14\1\16\1\0\1\16\1\0"+
    "\1\22\2\0\1\22\1\31\1\0\1\23\2\0\4\23"+
    "\1\0\1\3\2\0\1\3\1\32\1\0\1\25\2\0"+
    "\1\25\1\0\1\26\2\0\4\26\1\0\1\27\2\0"+
    "\4\27\1\0\1\10\6\0\3\23\3\26\3\27\1\0"+
    "\1\10\1\0\1\33\3\0\3\23\1\26\1\34\1\27"+
    "\1\34\1\0\1\10\4\0\3\23\1\26\1\27\1\0"+
    "\1\10\4\0\1\23\1\26\1\27\1\0\1\10\4\0"+
    "\1\23\1\0\1\10\4\0\1\23\1\35\1\36\2\0"+
    "\1\37\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\51"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\51\0\u030b\0\u0334\0\51"+
    "\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\51\0\u042a\0\u0453"+
    "\0\u047c\0\51\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\51\0\u063f\0\u0668\0\u0691"+
    "\0\51\0\51\0\u06ba\0\51\0\u06e3\0\u070c\0\u0735\0\u075e"+
    "\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6"+
    "\0\51\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5"+
    "\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\51"+
    "\0\51\0\u0b0d\0\u0b36\0\u0b5f\0\u042a\0\51\0\u0b88\0\u0453"+
    "\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0572"+
    "\0\51\0\u0cd0\0\u059b\0\u0cf9\0\51\0\u0d22\0\u0d4b\0\u0668"+
    "\0\51\0\u0d74\0\u0691\0\u0d9d\0\51\0\u070c\0\51\0\u0dc6"+
    "\0\u0735\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u07d9\0\51\0\u0e93"+
    "\0\u0802\0\u0ebc\0\51\0\u087d\0\51\0\u0ee5\0\u08a6\0\u0f0e"+
    "\0\u08f8\0\51\0\u0f37\0\u0921\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb"+
    "\0\u09ee\0\51\0\u1004\0\u0a17\0\u102d\0\u1056\0\u107f\0\u10a8"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0"+
    "\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u138a\0\u13b3\0\u13dc\0\51\0\u1405\0\u142e\0\u1457"+
    "\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u094a\0\u1524\0\u0a40\0\u154d"+
    "\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695"+
    "\0\u16be\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd"+
    "\0\u1806\0\u182f\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925"+
    "\0\u194e\0\u1977\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d"+
    "\0\u1a96\0\51\0\u03d8\0\u1abf\0\u1ae8\0\u075e\0\u1b11\0\u1b3a"+
    "\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\35\20\1\22\11\20\51\0\1\23\1\24"+
    "\1\25\22\23\1\26\23\23\1\0\1\27\1\30\1\31"+
    "\1\32\1\33\6\0\7\34\3\0\11\34\1\35\11\34"+
    "\1\36\1\27\1\30\1\37\1\32\1\40\6\36\7\41"+
    "\3\36\23\41\1\36\1\27\1\30\1\36\1\32\5\36"+
    "\1\42\14\36\1\43\1\44\2\36\1\45\5\36\1\46"+
    "\1\47\7\36\1\27\1\30\1\50\1\32\1\51\6\36"+
    "\7\52\3\36\23\52\1\0\1\27\1\30\1\53\1\32"+
    "\1\54\4\0\1\55\1\0\7\56\3\0\23\56\1\36"+
    "\1\27\1\30\1\36\1\32\45\36\1\27\1\30\1\57"+
    "\1\36\1\60\1\61\1\62\1\63\1\36\1\64\1\36"+
    "\7\65\3\36\23\65\1\36\1\27\1\30\1\66\1\36"+
    "\1\67\6\36\1\70\1\71\1\72\4\70\3\36\23\70"+
    "\1\36\1\27\1\30\1\73\1\32\1\74\6\36\7\75"+
    "\1\76\2\36\23\75\1\36\1\27\1\30\1\77\1\36"+
    "\1\100\1\61\1\62\2\36\1\101\1\36\7\102\3\36"+
    "\23\102\1\36\1\27\1\30\1\103\1\36\1\104\6\36"+
    "\3\105\1\106\1\107\1\105\1\110\3\36\23\105\1\36"+
    "\1\27\1\30\1\111\1\36\1\112\6\36\3\113\1\114"+
    "\1\115\1\113\1\116\3\36\23\113\1\0\1\21\75\0"+
    "\1\117\22\0\2\23\1\0\22\23\1\0\24\23\1\24"+
    "\1\25\22\23\1\0\23\23\25\0\1\120\24\0\1\27"+
    "\1\30\46\0\3\31\1\121\20\31\1\122\24\31\2\32"+
    "\1\0\46\32\5\33\1\123\43\33\11\0\1\34\2\0"+
    "\7\34\3\0\23\34\11\0\1\34\2\0\7\34\3\0"+
    "\1\124\22\34\3\125\1\126\20\125\1\127\24\125\5\130"+
    "\1\131\43\130\11\0\1\41\2\0\7\41\3\0\23\41"+
    "\40\0\1\132\41\0\1\133\67\0\1\134\42\0\1\135"+
    "\37\0\1\136\13\0\1\137\3\0\3\140\1\141\20\140"+
    "\1\142\24\140\5\143\1\144\43\143\11\0\1\52\2\0"+
    "\7\52\3\0\23\52\3\53\1\145\20\53\1\146\24\53"+
    "\5\54\1\147\43\54\11\0\1\56\2\0\7\56\3\0"+
    "\23\56\3\150\1\151\20\150\1\152\24\150\5\153\1\154"+
    "\43\153\13\0\1\155\46\0\1\65\2\0\7\65\3\0"+
    "\23\65\3\156\1\157\20\156\1\160\24\156\5\161\1\162"+
    "\43\161\11\0\1\70\2\0\7\70\3\0\23\70\11\0"+
    "\1\70\2\0\7\70\3\0\12\70\1\163\10\70\11\0"+
    "\1\70\2\0\7\70\3\0\11\70\1\164\6\70\1\165"+
    "\2\70\3\166\1\167\20\166\1\170\24\166\5\171\1\172"+
    "\43\171\11\0\1\75\2\0\7\75\3\0\23\75\23\0"+
    "\1\173\25\0\3\174\1\175\20\174\1\176\24\174\5\177"+
    "\1\200\43\177\11\0\1\102\2\0\7\102\3\0\23\102"+
    "\3\201\1\202\20\201\1\203\24\201\5\204\1\205\43\204"+
    "\11\0\1\105\2\0\7\105\3\0\23\105\11\0\1\105"+
    "\2\0\7\105\3\0\7\105\1\206\13\105\11\0\1\105"+
    "\2\0\7\105\3\0\11\105\1\207\11\105\11\0\1\105"+
    "\2\0\7\105\3\0\3\105\1\210\17\105\3\211\1\212"+
    "\20\211\1\213\24\211\5\214\1\215\43\214\11\0\1\113"+
    "\2\0\7\113\3\0\23\113\11\0\1\113\2\0\7\113"+
    "\3\0\7\113\1\216\13\113\11\0\1\113\2\0\7\113"+
    "\3\0\11\113\1\217\11\113\11\0\1\113\2\0\7\113"+
    "\3\0\3\113\1\220\17\113\36\0\1\221\12\0\51\31"+
    "\5\0\1\33\54\0\1\34\2\0\7\34\3\0\10\34"+
    "\1\222\12\34\51\125\5\0\1\130\102\0\1\223\54\0"+
    "\1\224\46\0\1\225\47\0\1\226\45\0\1\227\50\0"+
    "\1\230\13\0\51\140\5\0\1\143\43\0\51\53\5\0"+
    "\1\54\43\0\51\150\5\0\1\153\43\0\51\156\5\0"+
    "\1\161\54\0\1\70\2\0\7\70\3\0\11\70\1\231"+
    "\11\70\11\0\1\70\2\0\7\70\3\0\16\70\1\232"+
    "\4\70\11\0\1\70\2\0\7\70\3\0\3\70\1\233"+
    "\17\70\51\166\5\0\1\171\43\0\51\174\5\0\1\177"+
    "\43\0\51\201\5\0\1\204\54\0\1\105\2\0\7\105"+
    "\3\0\12\105\1\234\10\105\11\0\1\105\2\0\7\105"+
    "\3\0\16\105\1\235\4\105\11\0\1\105\2\0\7\105"+
    "\3\0\21\105\1\236\1\105\51\211\5\0\1\214\54\0"+
    "\1\113\2\0\7\113\3\0\12\113\1\237\10\113\11\0"+
    "\1\113\2\0\7\113\3\0\16\113\1\240\4\113\11\0"+
    "\1\113\2\0\7\113\3\0\21\113\1\241\1\113\31\0"+
    "\1\242\30\0\1\34\2\0\7\34\3\0\3\34\1\243"+
    "\17\34\43\0\1\244\34\0\1\245\52\0\1\246\60\0"+
    "\1\247\35\0\1\250\53\0\1\245\30\0\1\70\2\0"+
    "\7\70\3\0\1\70\1\251\21\70\11\0\1\70\2\0"+
    "\7\70\3\0\6\70\1\252\14\70\11\0\1\70\2\0"+
    "\7\70\3\0\11\70\1\253\11\70\11\0\1\105\2\0"+
    "\7\105\3\0\1\236\22\105\11\0\1\105\2\0\7\105"+
    "\3\0\3\105\1\254\17\105\11\0\1\105\2\0\7\105"+
    "\3\0\16\105\1\255\4\105\11\0\1\113\2\0\7\113"+
    "\3\0\1\241\22\113\11\0\1\113\2\0\7\113\3\0"+
    "\3\113\1\256\17\113\11\0\1\113\2\0\7\113\3\0"+
    "\16\113\1\257\4\113\43\0\1\260\16\0\1\34\2\0"+
    "\7\34\3\0\15\34\1\261\5\34\44\0\1\262\46\0"+
    "\1\263\37\0\1\264\63\0\1\265\15\0\1\70\2\0"+
    "\7\70\3\0\3\70\1\266\17\70\11\0\1\70\2\0"+
    "\7\70\3\0\16\70\1\267\4\70\11\0\1\70\2\0"+
    "\7\70\3\0\16\70\1\270\4\70\11\0\1\105\2\0"+
    "\7\105\3\0\4\105\1\271\16\105\11\0\1\113\2\0"+
    "\7\113\3\0\4\113\1\272\16\113\41\0\1\273\20\0"+
    "\1\34\2\0\7\34\3\0\13\34\1\274\7\34\42\0"+
    "\1\275\45\0\1\276\53\0\1\277\42\0\1\300\25\0"+
    "\1\70\2\0\7\70\3\0\13\70\1\253\7\70\11\0"+
    "\1\70\2\0\7\70\3\0\22\70\1\270\11\0\1\70"+
    "\2\0\6\70\1\301\3\0\23\70\11\0\1\105\2\0"+
    "\7\105\3\0\3\105\1\302\17\105\11\0\1\113\2\0"+
    "\7\113\3\0\3\113\1\303\17\113\26\0\1\304\33\0"+
    "\1\34\2\0\7\34\3\0\1\305\22\34\26\0\1\306"+
    "\72\0\1\307\44\0\1\310\44\0\1\311\21\0\1\70"+
    "\2\0\7\70\3\0\22\70\1\312\11\0\1\105\2\0"+
    "\7\105\3\0\14\105\1\255\6\105\11\0\1\113\2\0"+
    "\7\113\3\0\14\113\1\257\6\113\27\0\1\313\32\0"+
    "\1\34\2\0\7\34\3\0\1\34\1\314\21\34\34\0"+
    "\1\315\52\0\1\316\46\0\1\317\53\0\1\320\22\0"+
    "\1\70\2\0\7\70\3\0\13\70\1\321\7\70\31\0"+
    "\1\322\30\0\1\34\2\0\7\34\3\0\3\34\1\323"+
    "\17\34\37\0\1\324\32\0\1\325\60\0\1\320\62\0"+
    "\1\245\16\0\1\70\2\0\7\70\3\0\3\70\1\326"+
    "\17\70\44\0\1\245\46\0\1\327\37\0\1\330\47\0"+
    "\1\331\54\0\1\332\43\0\1\333\47\0\1\334\66\0"+
    "\1\230\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7175];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\15\0\1\11\4\1\1\11\2\1\1\11"+
    "\1\0\1\1\1\0\2\1\1\11\3\1\1\11\10\1"+
    "\2\0\1\11\3\1\2\11\1\1\1\11\14\1\1\11"+
    "\15\1\1\0\2\11\1\0\2\1\1\0\1\11\2\0"+
    "\1\1\7\0\1\11\2\0\1\1\1\11\1\0\1\1"+
    "\1\0\1\11\2\0\1\1\1\11\1\0\1\11\2\0"+
    "\4\1\1\0\1\11\2\0\1\1\1\11\1\0\1\11"+
    "\2\0\1\1\1\0\1\11\2\0\4\1\1\0\1\11"+
    "\2\0\4\1\1\0\1\1\6\0\11\1\1\0\1\1"+
    "\1\0\1\11\3\0\7\1\1\0\1\1\4\0\5\1"+
    "\1\0\1\1\4\0\3\1\1\0\1\1\4\0\1\1"+
    "\1\0\1\1\4\0\1\1\1\11\1\1\2\0\1\1"+
    "\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /**
     * The number of open but not closed braces.
     * Note: lexer does not distinguish braces from brackets while counting them.
     */
    private int myBraceCount = 0;

    /** A token type of parsed block scalar */
    private IElementType myBlockScalarType = null;

    /** A state to be returned in (or it is used to calculate next state) */
    private int myReturnState = YYINITIAL;

    private int[] indentLevelPos = {0, 0, 0, 0, 0, 0};
    private int[] indentLevelState = {ENTITY_STATE, META_STATE, ATTR_STATE, ATTRMETA_STATE, SUBPROP_STATE, SUBPROPMETA_STATE};
    private int maxIndentLevel = 6;
    private int currentIndentLevel = 0;

    //-------------------------------------------------------------------------------------------------------------------

    public boolean isCleanState() {
        return yystate() == YYINITIAL
           && myBraceCount == 0;
    }

    public void cleanMyState() {
        myBraceCount = 0;
        myBlockScalarType = null;

        yycolumn = 0;
        myReturnState = YYINITIAL;

        yybegin(YYINITIAL);
    }

    //-------------------------------------------------------------------------------------------------------------------

    /** @param offset offset from currently matched token start (could be negative) */
    private char getCharAtOffset(final int offset) {
        final int loc = getTokenStart() + offset;
        return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
    }

    private boolean isAfterEol() {
        final char prev = getCharAtOffset(-1);
        return prev == (char)-1 || prev == '\n';
    }

    private IElementType getWhitespaceType() {
        return isAfterEol() ? INDENT : WHITESPACE;
    }

    private int getIndentState() {
        assert isAfterEol();
        int indentPos = yylength();
        for (int i = 0; i < yylength(); i+=1) {
            if (getCharAtOffset(i) == '\t') {
                indentPos += 1;
            }
        }

        int lastIndentPos = this.indentLevelPos[this.currentIndentLevel];
        if (indentPos > lastIndentPos) {
            if (this.currentIndentLevel == maxIndentLevel) {
                return LEVEL_ERROR;
            }
            this.currentIndentLevel ++;
            this.indentLevelPos[this.currentIndentLevel] = indentPos;
            return this.indentLevelState[this.currentIndentLevel];

        } else if (indentPos < lastIndentPos) {
            for (int i = 0; i < this.currentIndentLevel; i++) {
                if (this.indentLevelPos[i] == indentPos) {
                    this.currentIndentLevel = i;
                    return this.indentLevelState[this.currentIndentLevel];
                }
            }
            return LEVEL_ERROR;
        }
        return this.indentLevelState[this.currentIndentLevel];
    }

    private void goToState(int state) {
        yybegin(state);
        yypushback(yylength());
    }

    //-------------------------------------------------------------------------------------------------------------------
    private void openBrace() {
        myBraceCount++;
        if (myBraceCount != 0) {
            yybegin(PLAIN_BLOCK_STATE);
        }
    }

    private void closeBrace() {
        if (myBraceCount > 0) {
            myBraceCount--;
        }
        if (myBraceCount == 0){
            yybegin(this.indentLevelState[this.currentIndentLevel]);
        }
    }

    //-------------------------------------------------------------------------------------------------------------------
    private void trace(String tag) {
        int tokenStart = getTokenStart();
        int tokenEnd = Math.min(tokenStart + 40, zzBuffer.length());
        System.out.println("====" + tag + "\n{{ " + zzBuffer.subSequence(tokenStart, tokenEnd) + " }}");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(ENTITY_STATE);
          yypushback(yylength());
            }
          // fall through
          case 32: break;
          case 2:
            { yybegin(getIndentState());
          return INDENT;
            }
          // fall through
          case 33: break;
          case 3:
            { return TEXT;
            }
          // fall through
          case 34: break;
          case 4:
            { return WHITESPACE;
            }
          // fall through
          case 35: break;
          case 5:
            { return EOL;
            }
          // fall through
          case 36: break;
          case 6:
            { yybegin(LINE_START_STATE);
          return EOL;
            }
          // fall through
          case 37: break;
          case 7:
            { return COMMENT;
            }
          // fall through
          case 38: break;
          case 8:
            { return NAMESPACE_VALUE;
            }
          // fall through
          case 39: break;
          case 9:
            { return BAD_CHAR;
            }
          // fall through
          case 40: break;
          case 10:
            { yybegin(WAITING_ENTITY_ALIAS_NAME_STATE);
          return ENTITY_NAME;
            }
          // fall through
          case 41: break;
          case 11:
            { yybegin(WAITING_METAINFO_VALUE_STATE);
          return COLON;
            }
          // fall through
          case 42: break;
          case 12:
            { yybegin(WAITING_ATTR_ALIAS_NAME_STATE);
          return ATTR_NAME;
            }
          // fall through
          case 43: break;
          case 13:
            { yybegin(WAITING_SUBPROP_TYPE_STATE);
          return COLON;
            }
          // fall through
          case 44: break;
          case 14:
            { return SUBPROP_NAME;
            }
          // fall through
          case 45: break;
          case 15:
            { return OPEN_BRACKET;
            }
          // fall through
          case 46: break;
          case 16:
            { return CLOSE_BRACKET;
            }
          // fall through
          case 47: break;
          case 17:
            { yybegin(WAITING_ENTITY_TYPE_STATE);
          return COLON;
            }
          // fall through
          case 48: break;
          case 18:
            { return ENTITY_ALIAS_NAME;
            }
          // fall through
          case 49: break;
          case 19:
            { return ENTITY_TYPE;
            }
          // fall through
          case 50: break;
          case 20:
            { yybegin(WAITING_ATTR_TYPE_STATE);
          return COLON;
            }
          // fall through
          case 51: break;
          case 21:
            { return ATTR_ALIAS_NAME;
            }
          // fall through
          case 52: break;
          case 22:
            { return ATTR_TYPE;
            }
          // fall through
          case 53: break;
          case 23:
            { return SUBPROP_TYPE;
            }
          // fall through
          case 54: break;
          case 24:
            { closeBrace();
          return CLOSE_PLAIN_BLOCK;
            }
          // fall through
          case 55: break;
          case 25:
            { yybegin(WAITING_ENTITY_TYPE_STATE);
          return INHERITED;
            }
          // fall through
          case 56: break;
          case 26:
            { yybegin(PLAIN_BLOCK_STATE);
          return OPEN_PLAIN_BLOCK;
            }
          // fall through
          case 57: break;
          case 27:
            { if (yystate() == ATTRMETA_STATE) {
              return ATTRMETA_TYPE;

          } else if (yystate() == SUBPROPMETA_STATE) {
              return SUBPROPMETA_TYPE;
          }
          return META_TYPE;
            }
          // fall through
          case 58: break;
          case 28:
            { return BUILDIN_TYPE;
            }
          // fall through
          case 59: break;
          case 29:
            { goToState(NAMESPACE_STATE);
            }
          // fall through
          case 60: break;
          case 30:
            { return NAMESPACE_MARKER;
            }
          // fall through
          case 61: break;
          case 31:
            { return ENTITY_BUILDIN_TYPE;
            }
          // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
