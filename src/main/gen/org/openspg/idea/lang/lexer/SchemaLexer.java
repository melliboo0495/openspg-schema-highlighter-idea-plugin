// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Schema.flex

package org.openspg.idea.lang.lexer;

import com.intellij.psi.tree.IElementType;

/* Auto generated File */

public class SchemaLexer implements com.intellij.lexer.FlexLexer, org.openspg.idea.grammar.psi.SchemaTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LINE_START_STATE = 2;
  public static final int BLOCK_STATE = 4;
  public static final int PLAIN_BLOCK_STATE = 6;
  public static final int NAMESPACE_STATE = 8;
  public static final int ENTITY_STATE = 10;
  public static final int META_STATE = 12;
  public static final int ATTR_STATE = 14;
  public static final int ATTRMETA_STATE = 16;
  public static final int SUBPROP_STATE = 18;
  public static final int SUBPROPMETA_STATE = 20;
  public static final int ERROR_STATE = 22;
  public static final int WAITING_ENTITY_ALIAS_NAME_STATE = 24;
  public static final int WAITING_ENTITY_CLASS_STATE = 26;
  public static final int WAITING_METAINFO_VALUE_STATE = 28;
  public static final int WAITING_ATTR_ALIAS_NAME_STATE = 30;
  public static final int WAITING_ATTR_TYPE_STATE = 32;
  public static final int WAITING_SUBPROP_TYPE_STATE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     5,  5,  7,  7,  5,  5,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 
    13, 13, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\25\0\1\1\1\0\1\3\1\4"+
    "\3\0\1\5\1\6\1\7\2\0\1\10\1\11\1\12"+
    "\1\0\12\13\1\14\3\0\1\15\2\0\1\13\1\16"+
    "\1\17\1\13\1\20\1\21\2\13\1\22\6\13\1\23"+
    "\2\13\1\24\1\25\6\13\1\26\1\27\1\30\1\0"+
    "\1\31\1\0\1\32\1\13\1\33\1\34\1\35\1\13"+
    "\1\36\1\37\1\40\2\13\1\41\1\42\1\43\1\44"+
    "\1\45\1\13\1\46\1\47\1\50\1\51\1\52\1\13"+
    "\1\53\1\54\1\13\57\0\1\31\12\0\1\31\4\0"+
    "\1\31\5\0\27\31\1\0\37\31\1\0\u01ca\31\4\0"+
    "\14\31\16\0\5\31\7\0\1\31\1\0\1\31\21\0"+
    "\165\31\1\0\2\31\2\0\4\31\1\0\1\31\6\0"+
    "\1\31\1\0\3\31\1\0\1\31\1\0\24\31\1\0"+
    "\123\31\1\0\213\31\1\0\255\31\1\0\46\31\2\0"+
    "\1\31\6\0\51\31\10\0\55\31\1\0\1\31\1\0"+
    "\2\31\1\0\2\31\1\0\1\31\10\0\33\31\4\0"+
    "\4\31\35\0\13\31\5\0\112\31\4\0\146\31\1\0"+
    "\10\31\2\0\12\31\1\0\23\31\2\0\1\31\20\0"+
    "\73\31\2\0\145\31\16\0\66\31\4\0\1\31\2\0"+
    "\1\31\2\0\56\31\22\0\34\31\4\0\13\31\65\0"+
    "\25\31\1\0\10\31\25\0\17\31\1\0\201\31\2\0"+
    "\12\31\1\0\23\31\1\0\10\31\2\0\2\31\2\0"+
    "\26\31\1\0\7\31\1\0\1\31\3\0\4\31\2\0"+
    "\11\31\2\0\2\31\2\0\4\31\10\0\1\31\4\0"+
    "\2\31\1\0\5\31\2\0\14\31\12\0\1\31\1\0"+
    "\1\31\2\0\3\31\1\0\6\31\4\0\2\31\2\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\2\31\1\0"+
    "\2\31\2\0\1\31\1\0\5\31\4\0\2\31\2\0"+
    "\3\31\3\0\1\31\7\0\4\31\1\0\1\31\7\0"+
    "\20\31\13\0\3\31\1\0\11\31\1\0\3\31\1\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\5\31\2\0"+
    "\12\31\1\0\3\31\1\0\3\31\2\0\1\31\17\0"+
    "\4\31\2\0\12\31\11\0\7\31\1\0\3\31\1\0"+
    "\10\31\2\0\2\31\2\0\26\31\1\0\7\31\1\0"+
    "\2\31\1\0\5\31\2\0\11\31\2\0\2\31\2\0"+
    "\3\31\10\0\2\31\4\0\2\31\1\0\5\31\2\0"+
    "\12\31\1\0\1\31\20\0\2\31\1\0\6\31\3\0"+
    "\3\31\1\0\4\31\3\0\2\31\1\0\1\31\1\0"+
    "\2\31\3\0\2\31\3\0\3\31\3\0\14\31\4\0"+
    "\5\31\3\0\3\31\1\0\4\31\2\0\1\31\6\0"+
    "\1\31\16\0\12\31\20\0\15\31\1\0\3\31\1\0"+
    "\27\31\1\0\20\31\3\0\10\31\1\0\3\31\1\0"+
    "\4\31\7\0\2\31\1\0\3\31\5\0\4\31\2\0"+
    "\12\31\20\0\4\31\1\0\10\31\1\0\3\31\1\0"+
    "\27\31\1\0\12\31\1\0\5\31\2\0\11\31\1\0"+
    "\3\31\1\0\4\31\7\0\2\31\7\0\1\31\1\0"+
    "\4\31\2\0\12\31\1\0\2\31\15\0\4\31\1\0"+
    "\10\31\1\0\3\31\1\0\63\31\1\0\3\31\1\0"+
    "\5\31\5\0\4\31\7\0\5\31\2\0\12\31\12\0"+
    "\6\31\2\0\2\31\1\0\22\31\3\0\30\31\1\0"+
    "\11\31\1\0\1\31\2\0\7\31\3\0\1\31\4\0"+
    "\6\31\1\0\1\31\1\0\10\31\6\0\12\31\2\0"+
    "\2\31\15\0\72\31\5\0\17\31\1\0\12\31\47\0"+
    "\2\31\1\0\1\31\1\0\5\31\1\0\30\31\1\0"+
    "\1\31\1\0\27\31\2\0\5\31\1\0\1\31\1\0"+
    "\6\31\2\0\12\31\2\0\4\31\40\0\1\31\27\0"+
    "\2\31\6\0\12\31\13\0\1\31\1\0\1\31\1\0"+
    "\1\31\4\0\12\31\1\0\44\31\4\0\24\31\1\0"+
    "\22\31\1\0\44\31\11\0\1\31\71\0\112\31\6\0"+
    "\116\31\2\0\46\31\1\0\1\31\5\0\1\31\2\0"+
    "\53\31\1\0\115\31\1\0\4\31\2\0\7\31\1\0"+
    "\1\31\1\0\4\31\2\0\51\31\1\0\4\31\2\0"+
    "\41\31\1\0\4\31\2\0\7\31\1\0\1\31\1\0"+
    "\4\31\2\0\17\31\1\0\71\31\1\0\4\31\2\0"+
    "\103\31\2\0\3\31\40\0\20\31\20\0\126\31\2\0"+
    "\6\31\3\0\u016c\31\2\0\21\31\1\0\32\31\5\0"+
    "\113\31\3\0\13\31\7\0\15\31\1\0\7\31\13\0"+
    "\25\31\13\0\24\31\14\0\15\31\1\0\3\31\1\0"+
    "\2\31\14\0\124\31\3\0\1\31\4\0\2\31\2\0"+
    "\12\31\41\0\3\31\2\0\12\31\6\0\131\31\7\0"+
    "\53\31\5\0\106\31\12\0\37\31\1\0\14\31\4\0"+
    "\14\31\12\0\50\31\2\0\5\31\13\0\54\31\4\0"+
    "\32\31\6\0\12\31\46\0\34\31\4\0\77\31\1\0"+
    "\35\31\2\0\13\31\6\0\12\31\15\0\1\31\10\0"+
    "\17\31\101\0\114\31\4\0\12\31\21\0\11\31\14\0"+
    "\164\31\14\0\70\31\10\0\12\31\3\0\61\31\2\0"+
    "\11\31\7\0\53\31\2\0\3\31\20\0\3\31\1\0"+
    "\47\31\5\0\372\31\1\0\33\31\2\0\6\31\2\0"+
    "\46\31\2\0\6\31\2\0\10\31\1\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\37\31\2\0\65\31\1\0"+
    "\7\31\1\0\1\31\3\0\3\31\1\0\7\31\3\0"+
    "\4\31\2\0\6\31\4\0\15\31\5\0\3\31\1\0"+
    "\7\31\102\0\2\31\23\0\1\31\34\0\1\31\15\0"+
    "\1\31\20\0\15\31\63\0\41\31\21\0\1\31\4\0"+
    "\1\31\2\0\12\31\1\0\1\31\3\0\5\31\6\0"+
    "\1\31\1\0\1\31\1\0\1\31\1\0\4\31\1\0"+
    "\13\31\2\0\4\31\5\0\5\31\4\0\1\31\21\0"+
    "\51\31\u022d\0\64\31\26\0\57\31\1\0\57\31\1\0"+
    "\205\31\6\0\11\31\14\0\46\31\1\0\1\31\5\0"+
    "\1\31\2\0\70\31\7\0\1\31\17\0\30\31\11\0"+
    "\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0"+
    "\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0"+
    "\40\31\57\0\1\31\325\0\3\31\31\0\17\31\1\0"+
    "\5\31\2\0\5\31\4\0\126\31\2\0\2\31\2\0"+
    "\3\31\1\0\132\31\1\0\4\31\5\0\53\31\1\0"+
    "\136\31\21\0\33\31\65\0\306\31\112\0\360\31\20\0"+
    "\215\31\103\0\56\31\2\0\15\31\3\0\34\31\24\0"+
    "\63\31\1\0\12\31\1\0\163\31\45\0\11\31\2\0"+
    "\147\31\2\0\65\31\2\0\5\31\60\0\61\31\30\0"+
    "\64\31\14\0\106\31\12\0\12\31\6\0\30\31\3\0"+
    "\1\31\1\0\61\31\2\0\44\31\14\0\35\31\3\0"+
    "\101\31\16\0\13\31\6\0\37\31\1\0\67\31\11\0"+
    "\16\31\2\0\12\31\6\0\27\31\3\0\111\31\30\0"+
    "\3\31\2\0\20\31\2\0\5\31\12\0\6\31\2\0"+
    "\6\31\2\0\6\31\11\0\7\31\1\0\7\31\1\0"+
    "\53\31\1\0\14\31\10\0\173\31\1\0\2\31\2\0"+
    "\12\31\6\0\244\31\14\0\27\31\4\0\61\31\4\0"+
    "\156\31\2\0\152\31\46\0\7\31\14\0\5\31\5\0"+
    "\14\31\1\0\15\31\1\0\5\31\1\0\1\31\1\0"+
    "\2\31\1\0\2\31\1\0\154\31\41\0\153\31\22\0"+
    "\100\31\2\0\66\31\50\0\14\31\4\0\20\31\20\0"+
    "\20\31\3\0\2\31\30\0\3\31\40\0\5\31\1\0"+
    "\207\31\23\0\12\31\7\0\32\31\4\0\1\31\1\0"+
    "\32\31\13\0\131\31\3\0\6\31\2\0\6\31\2\0"+
    "\6\31\2\0\3\31\43\0\14\31\1\0\32\31\1\0"+
    "\23\31\1\0\2\31\1\0\17\31\2\0\16\31\42\0"+
    "\173\31\105\0\65\31\210\0\1\31\202\0\35\31\3\0"+
    "\61\31\17\0\1\31\37\0\40\31\15\0\36\31\5\0"+
    "\53\31\5\0\36\31\2\0\44\31\4\0\10\31\1\0"+
    "\5\31\52\0\236\31\2\0\12\31\6\0\44\31\4\0"+
    "\44\31\4\0\50\31\10\0\64\31\234\0\67\31\11\0"+
    "\26\31\12\0\10\31\230\0\6\31\2\0\1\31\1\0"+
    "\54\31\1\0\2\31\3\0\1\31\2\0\27\31\12\0"+
    "\27\31\11\0\37\31\101\0\23\31\1\0\2\31\12\0"+
    "\26\31\12\0\32\31\106\0\70\31\6\0\2\31\100\0"+
    "\4\31\1\0\2\31\5\0\10\31\1\0\3\31\1\0"+
    "\35\31\2\0\3\31\4\0\1\31\40\0\35\31\3\0"+
    "\35\31\43\0\10\31\1\0\36\31\31\0\66\31\12\0"+
    "\26\31\12\0\23\31\15\0\22\31\156\0\111\31\67\0"+
    "\63\31\15\0\63\31\15\0\50\31\10\0\12\31\306\0"+
    "\35\31\12\0\1\31\10\0\41\31\217\0\27\31\11\0"+
    "\107\31\37\0\12\31\17\0\74\31\25\0\31\31\7\0"+
    "\12\31\6\0\65\31\1\0\12\31\4\0\3\31\11\0"+
    "\44\31\2\0\1\31\11\0\105\31\4\0\4\31\3\0"+
    "\13\31\1\0\1\31\43\0\22\31\1\0\45\31\6\0"+
    "\1\31\101\0\7\31\1\0\1\31\1\0\4\31\1\0"+
    "\17\31\1\0\12\31\7\0\73\31\5\0\12\31\6\0"+
    "\4\31\1\0\10\31\2\0\2\31\2\0\26\31\1\0"+
    "\7\31\1\0\2\31\1\0\5\31\1\0\12\31\2\0"+
    "\2\31\2\0\3\31\2\0\1\31\6\0\1\31\5\0"+
    "\7\31\2\0\7\31\3\0\5\31\213\0\113\31\5\0"+
    "\12\31\4\0\2\31\40\0\106\31\1\0\1\31\10\0"+
    "\12\31\246\0\66\31\2\0\11\31\27\0\6\31\42\0"+
    "\101\31\3\0\1\31\13\0\12\31\46\0\71\31\7\0"+
    "\12\31\66\0\33\31\2\0\17\31\4\0\12\31\306\0"+
    "\73\31\145\0\112\31\25\0\1\31\240\0\10\31\2\0"+
    "\56\31\2\0\10\31\1\0\2\31\33\0\77\31\10\0"+
    "\1\31\10\0\112\31\3\0\1\31\42\0\71\31\7\0"+
    "\11\31\1\0\55\31\1\0\11\31\17\0\12\31\30\0"+
    "\36\31\2\0\26\31\1\0\16\31\111\0\7\31\1\0"+
    "\2\31\1\0\54\31\3\0\1\31\1\0\2\31\1\0"+
    "\11\31\10\0\12\31\6\0\6\31\1\0\2\31\1\0"+
    "\45\31\1\0\2\31\1\0\6\31\7\0\12\31\u0136\0"+
    "\27\31\11\0\232\31\146\0\157\31\21\0\304\31\274\0"+
    "\57\31\321\0\107\31\271\0\71\31\7\0\37\31\1\0"+
    "\12\31\146\0\36\31\2\0\5\31\13\0\67\31\11\0"+
    "\4\31\14\0\12\31\11\0\25\31\5\0\23\31\260\0"+
    "\100\31\200\0\113\31\4\0\71\31\7\0\21\31\100\0"+
    "\2\31\1\0\1\31\34\0\370\31\10\0\363\31\15\0"+
    "\37\31\61\0\3\31\21\0\4\31\10\0\u018c\31\4\0"+
    "\153\31\5\0\15\31\3\0\11\31\7\0\12\31\3\0"+
    "\2\31\306\0\5\31\3\0\6\31\10\0\10\31\2\0"+
    "\7\31\36\0\4\31\224\0\3\31\273\0\125\31\1\0"+
    "\107\31\1\0\2\31\2\0\1\31\2\0\2\31\2\0"+
    "\4\31\1\0\14\31\1\0\1\31\1\0\7\31\1\0"+
    "\101\31\1\0\4\31\2\0\10\31\1\0\7\31\1\0"+
    "\34\31\1\0\4\31\1\0\5\31\1\0\1\31\3\0"+
    "\7\31\1\0\u0154\31\2\0\31\31\1\0\31\31\1\0"+
    "\37\31\1\0\31\31\1\0\37\31\1\0\31\31\1\0"+
    "\37\31\1\0\31\31\1\0\37\31\1\0\31\31\1\0"+
    "\10\31\2\0\151\31\4\0\62\31\10\0\1\31\16\0"+
    "\1\31\26\0\5\31\1\0\17\31\120\0\7\31\1\0"+
    "\21\31\2\0\7\31\1\0\2\31\1\0\5\31\325\0"+
    "\55\31\3\0\16\31\2\0\12\31\4\0\1\31\u0171\0"+
    "\72\31\6\0\305\31\13\0\7\31\51\0\114\31\4\0"+
    "\12\31\246\0\4\31\1\0\33\31\1\0\2\31\1\0"+
    "\1\31\2\0\1\31\1\0\12\31\1\0\4\31\1\0"+
    "\1\31\1\0\1\31\6\0\1\31\4\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\3\31\1\0\2\31\1\0"+
    "\1\31\2\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\0\1\31\2\0"+
    "\4\31\1\0\7\31\1\0\4\31\1\0\4\31\1\0"+
    "\1\31\1\0\12\31\1\0\21\31\5\0\3\31\1\0"+
    "\5\31\1\0\21\31\164\0\32\31\6\0\32\31\6\0"+
    "\32\31\166\0\327\31\51\0\65\31\13\0\336\31\2\0"+
    "\u0182\31\16\0\u0131\31\37\0\36\31\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\1\1\3\1\4\1\5\1\3"+
    "\1\4\1\6\1\0\1\7\1\0\2\10\2\11\1\12"+
    "\1\13\10\11\1\14\2\0\1\15\1\16\2\0\1\17"+
    "\1\20\1\21\1\22\1\11\1\23\1\24\4\23\2\11"+
    "\1\3\3\11\1\25\1\26\1\27\2\11\4\30\2\11"+
    "\4\31\1\0\1\32\1\10\1\0\2\10\13\0\1\14"+
    "\2\0\1\14\1\15\1\0\1\15\1\21\1\0\1\21"+
    "\1\33\5\23\1\0\1\3\2\0\1\3\1\34\1\0"+
    "\1\26\2\0\1\26\1\0\1\30\2\0\4\30\1\0"+
    "\1\31\2\0\4\31\1\0\1\10\3\0\1\35\7\0"+
    "\5\23\3\30\3\31\1\0\1\10\1\0\1\36\4\0"+
    "\5\23\1\30\1\37\1\31\1\37\1\0\1\10\4\0"+
    "\4\23\1\30\1\31\1\0\1\10\4\0\2\23\1\30"+
    "\1\31\1\0\1\10\4\0\2\23\1\0\1\10\4\0"+
    "\1\23\1\40\1\41\2\0\1\42\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\55"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\55\0\u0357\0\u0384\0\55"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\55\0\u0492\0\u04bf"+
    "\0\55\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\55\0\u0708\0\u0735"+
    "\0\55\0\55\0\u0762\0\55\0\u078f\0\u07bc\0\55\0\u07e9"+
    "\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951"+
    "\0\u097e\0\55\0\u09ab\0\55\0\u09d8\0\u0a05\0\u0a32\0\u0a5f"+
    "\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\55\0\55\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u05fa\0\55\0\u0e6a\0\u0627\0\u0e97\0\55\0\u0ec4\0\u0ef1"+
    "\0\55\0\u0f1e\0\u0f4b\0\55\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff"+
    "\0\u102c\0\u089d\0\55\0\u1059\0\u08ca\0\u1086\0\55\0\u0951"+
    "\0\55\0\u10b3\0\u097e\0\u10e0\0\u09d8\0\55\0\u110d\0\u0a05"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u0ae6\0\55\0\u11ee\0\u0b13"+
    "\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356"+
    "\0\u1383\0\55\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9"+
    "\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\55"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"+
    "\0\u18c9\0\u18f6\0\u0a32\0\u1923\0\u0b40\0\u1950\0\u197d\0\u19aa"+
    "\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a"+
    "\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2"+
    "\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\55\0\u0438\0\u1fd1\0\u1ffe\0\u07bc\0\u202b"+
    "\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\41\20\1\22\11\20\55\0\1\23\1\24"+
    "\1\25\25\23\1\26\24\23\1\0\1\27\1\30\1\31"+
    "\1\32\1\33\5\0\1\34\2\0\10\34\3\0\12\34"+
    "\1\35\11\34\1\36\1\27\1\30\1\36\1\32\1\36"+
    "\1\37\3\36\2\40\2\36\10\40\4\36\23\40\1\36"+
    "\1\27\1\30\1\36\1\32\7\36\1\41\16\36\1\42"+
    "\1\43\2\36\1\44\1\45\4\36\1\46\1\47\7\36"+
    "\1\27\1\30\1\50\1\32\1\51\5\36\1\52\2\36"+
    "\10\52\3\36\24\52\1\0\1\27\1\30\1\53\1\32"+
    "\1\54\5\0\1\55\1\56\1\0\10\55\3\0\24\55"+
    "\1\36\1\27\1\30\1\36\1\32\50\36\1\0\1\27"+
    "\1\30\1\57\1\0\1\60\1\61\1\62\3\0\1\63"+
    "\2\0\10\63\3\0\24\63\1\36\1\27\1\30\5\36"+
    "\1\64\1\65\1\36\1\66\1\67\1\36\1\70\1\71"+
    "\1\72\3\66\1\73\1\66\4\36\23\66\1\36\1\27"+
    "\1\30\1\74\1\32\1\75\5\36\1\76\2\36\10\76"+
    "\1\77\2\36\24\76\1\36\1\27\1\30\1\100\1\36"+
    "\1\101\1\61\1\102\3\36\1\103\1\104\1\36\10\103"+
    "\3\36\24\103\1\36\1\27\1\30\1\105\1\36\1\106"+
    "\5\36\1\107\2\36\3\107\1\110\1\111\2\107\1\112"+
    "\3\36\24\107\1\36\1\27\1\30\1\113\1\36\1\114"+
    "\5\36\1\115\2\36\3\115\1\116\1\117\2\115\1\120"+
    "\3\36\24\115\1\0\1\21\105\0\1\121\22\0\2\23"+
    "\1\0\25\23\1\0\25\23\1\24\1\25\25\23\1\0"+
    "\24\23\30\0\1\122\25\0\1\27\1\30\52\0\3\31"+
    "\1\123\23\31\1\124\25\31\2\32\1\0\52\32\5\33"+
    "\1\125\47\33\13\0\1\34\2\0\10\34\3\0\24\34"+
    "\13\0\1\34\2\0\10\34\3\0\1\34\1\126\22\34"+
    "\3\0\1\127\1\0\1\130\5\0\1\131\2\0\10\131"+
    "\3\0\24\131\12\0\2\40\2\0\10\40\4\0\23\40"+
    "\44\0\1\132\45\0\1\133\73\0\1\134\43\0\1\135"+
    "\57\0\1\136\43\0\1\137\13\0\1\140\3\0\3\141"+
    "\1\142\23\141\1\143\25\141\5\144\1\145\47\144\13\0"+
    "\1\52\2\0\10\52\3\0\24\52\3\53\1\146\23\53"+
    "\1\147\25\53\5\54\1\150\47\54\13\0\1\55\2\0"+
    "\10\55\3\0\24\55\3\57\1\151\23\57\1\152\25\57"+
    "\5\60\1\153\47\60\13\0\1\63\2\0\10\63\3\0"+
    "\24\63\15\0\1\154\52\0\1\66\2\0\10\66\4\0"+
    "\23\66\13\0\1\66\2\0\10\66\4\0\1\155\22\66"+
    "\13\0\1\66\2\0\10\66\4\0\12\66\1\156\10\66"+
    "\13\0\1\66\2\0\10\66\4\0\11\66\1\157\6\66"+
    "\1\160\2\66\13\0\1\66\2\0\10\66\4\0\16\66"+
    "\1\161\4\66\3\162\1\163\23\162\1\164\25\162\5\165"+
    "\1\166\47\165\13\0\1\76\2\0\10\76\3\0\24\76"+
    "\26\0\1\167\26\0\3\170\1\171\23\170\1\172\25\170"+
    "\5\173\1\174\47\173\13\0\1\103\2\0\10\103\3\0"+
    "\24\103\3\175\1\176\23\175\1\177\25\175\5\200\1\201"+
    "\47\200\13\0\1\107\2\0\10\107\3\0\24\107\13\0"+
    "\1\107\2\0\10\107\3\0\10\107\1\202\13\107\13\0"+
    "\1\107\2\0\10\107\3\0\12\107\1\203\11\107\13\0"+
    "\1\107\2\0\10\107\3\0\4\107\1\204\17\107\3\205"+
    "\1\206\23\205\1\207\25\205\5\210\1\211\47\210\13\0"+
    "\1\115\2\0\10\115\3\0\24\115\13\0\1\115\2\0"+
    "\10\115\3\0\10\115\1\212\13\115\13\0\1\115\2\0"+
    "\10\115\3\0\12\115\1\213\11\115\13\0\1\115\2\0"+
    "\10\115\3\0\4\115\1\214\17\115\42\0\1\215\12\0"+
    "\55\31\5\0\1\33\62\0\1\34\2\0\10\34\3\0"+
    "\11\34\1\216\12\34\3\127\1\217\23\127\1\220\25\127"+
    "\5\130\1\221\47\130\7\0\1\222\3\0\1\131\2\0"+
    "\10\131\3\0\24\131\43\0\1\223\60\0\1\224\52\0"+
    "\1\225\43\0\1\226\64\0\1\227\51\0\1\230\54\0"+
    "\1\231\13\0\55\141\5\0\1\144\47\0\55\53\5\0"+
    "\1\54\47\0\55\57\5\0\1\60\62\0\1\66\2\0"+
    "\10\66\4\0\15\66\1\232\5\66\13\0\1\66\2\0"+
    "\10\66\4\0\11\66\1\233\11\66\13\0\1\66\2\0"+
    "\10\66\4\0\16\66\1\234\4\66\13\0\1\66\2\0"+
    "\10\66\4\0\3\66\1\235\17\66\13\0\1\66\2\0"+
    "\10\66\4\0\1\236\22\66\55\162\5\0\1\165\47\0"+
    "\55\170\5\0\1\173\47\0\55\175\5\0\1\200\62\0"+
    "\1\107\2\0\10\107\3\0\13\107\1\237\10\107\13\0"+
    "\1\107\2\0\10\107\3\0\17\107\1\240\4\107\13\0"+
    "\1\107\2\0\10\107\3\0\22\107\1\241\1\107\55\205"+
    "\5\0\1\210\62\0\1\115\2\0\10\115\3\0\13\115"+
    "\1\242\10\115\13\0\1\115\2\0\10\115\3\0\17\115"+
    "\1\243\4\115\13\0\1\115\2\0\10\115\3\0\22\115"+
    "\1\244\1\115\35\0\1\245\32\0\1\34\2\0\10\34"+
    "\3\0\4\34\1\246\17\34\7\0\1\222\45\0\55\127"+
    "\5\0\1\130\1\0\1\222\114\0\1\247\40\0\1\250"+
    "\56\0\1\251\54\0\1\252\64\0\1\253\41\0\1\254"+
    "\57\0\1\250\32\0\1\66\2\0\10\66\4\0\6\66"+
    "\1\255\14\66\13\0\1\66\2\0\10\66\4\0\1\66"+
    "\1\256\21\66\13\0\1\66\2\0\10\66\4\0\6\66"+
    "\1\257\14\66\13\0\1\66\2\0\10\66\4\0\11\66"+
    "\1\260\11\66\13\0\1\66\2\0\10\66\4\0\11\66"+
    "\1\261\11\66\13\0\1\107\2\0\10\107\3\0\1\107"+
    "\1\241\22\107\13\0\1\107\2\0\10\107\3\0\4\107"+
    "\1\262\17\107\13\0\1\107\2\0\10\107\3\0\17\107"+
    "\1\263\4\107\13\0\1\115\2\0\10\115\3\0\1\115"+
    "\1\244\22\115\13\0\1\115\2\0\10\115\3\0\4\115"+
    "\1\264\17\115\13\0\1\115\2\0\10\115\3\0\17\115"+
    "\1\265\4\115\47\0\1\266\20\0\1\34\2\0\10\34"+
    "\3\0\16\34\1\267\5\34\50\0\1\270\52\0\1\271"+
    "\61\0\1\250\36\0\1\272\67\0\1\273\17\0\1\66"+
    "\2\0\10\66\4\0\1\66\1\274\21\66\13\0\1\66"+
    "\2\0\10\66\4\0\3\66\1\275\17\66\13\0\1\66"+
    "\2\0\10\66\4\0\16\66\1\276\4\66\13\0\1\66"+
    "\2\0\10\66\4\0\16\66\1\274\4\66\13\0\1\66"+
    "\2\0\10\66\4\0\2\66\1\277\20\66\13\0\1\107"+
    "\2\0\10\107\3\0\5\107\1\300\16\107\13\0\1\115"+
    "\2\0\10\115\3\0\5\115\1\301\16\115\45\0\1\302"+
    "\22\0\1\34\2\0\10\34\3\0\14\34\1\303\7\34"+
    "\46\0\1\304\51\0\1\305\57\0\1\306\46\0\1\307"+
    "\27\0\1\66\2\0\7\66\1\310\4\0\23\66\13\0"+
    "\1\66\2\0\10\66\4\0\13\66\1\260\7\66\13\0"+
    "\1\66\2\0\10\66\4\0\22\66\1\274\13\0\1\66"+
    "\2\0\10\66\4\0\1\311\22\66\13\0\1\107\2\0"+
    "\10\107\3\0\4\107\1\312\17\107\13\0\1\115\2\0"+
    "\10\115\3\0\4\115\1\313\17\115\32\0\1\314\35\0"+
    "\1\34\2\0\10\34\3\0\1\34\1\315\22\34\32\0"+
    "\1\316\76\0\1\317\50\0\1\320\50\0\1\321\23\0"+
    "\1\66\2\0\10\66\4\0\22\66\1\322\13\0\1\66"+
    "\2\0\10\66\4\0\14\66\1\323\6\66\13\0\1\107"+
    "\2\0\10\107\3\0\15\107\1\263\6\107\13\0\1\115"+
    "\2\0\10\115\3\0\15\115\1\265\6\115\33\0\1\324"+
    "\34\0\1\34\2\0\10\34\3\0\2\34\1\325\21\34"+
    "\40\0\1\326\56\0\1\327\52\0\1\330\57\0\1\331"+
    "\24\0\1\66\2\0\10\66\4\0\13\66\1\332\7\66"+
    "\13\0\1\66\2\0\10\66\4\0\2\66\1\274\20\66"+
    "\35\0\1\333\32\0\1\34\2\0\10\34\3\0\4\34"+
    "\1\334\17\34\43\0\1\335\34\0\1\336\66\0\1\331"+
    "\66\0\1\250\20\0\1\66\2\0\10\66\4\0\3\66"+
    "\1\337\17\66\50\0\1\250\52\0\1\340\43\0\1\341"+
    "\53\0\1\342\60\0\1\343\47\0\1\344\53\0\1\345"+
    "\72\0\1\231\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8505];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\15\0\1\11\4\1\1\11\2\1\1\11"+
    "\1\0\1\1\1\0\2\1\1\11\2\1\1\11\11\1"+
    "\2\0\1\1\1\11\2\0\2\11\1\1\1\11\2\1"+
    "\1\11\12\1\1\11\1\1\1\11\14\1\1\0\2\11"+
    "\1\0\2\1\13\0\1\11\2\0\1\1\1\11\1\0"+
    "\1\1\1\11\1\0\1\1\1\11\5\1\1\0\1\11"+
    "\2\0\1\1\1\11\1\0\1\11\2\0\1\1\1\0"+
    "\1\11\2\0\4\1\1\0\1\11\2\0\4\1\1\0"+
    "\1\1\3\0\1\11\7\0\13\1\1\0\1\1\1\0"+
    "\1\11\4\0\11\1\1\0\1\1\4\0\6\1\1\0"+
    "\1\1\4\0\4\1\1\0\1\1\4\0\2\1\1\0"+
    "\1\1\4\0\1\1\1\11\1\1\2\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /**
     * The number of open but not closed braces.
     * Note: lexer does not distinguish braces from brackets while counting them.
     */
    private int myBraceCount = 0;

    private final int[] indentPos = {0, 0, 0, 0, 0, 0};
    private final int[] indentState = {ENTITY_STATE, META_STATE, ATTR_STATE, ATTRMETA_STATE, SUBPROP_STATE, SUBPROPMETA_STATE};
    private final int maxIndentLevel = 6;
    private int currentIndentLevel = 0;

    //-------------------------------------------------------------------------------------------------------------------

    /** @param offset offset from currently matched token start (could be negative) */
    private char getCharAtOffset(final int offset) {
        final int loc = getTokenStart() + offset;
        return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
    }

    private boolean isAfterEol() {
        final char prev = getCharAtOffset(-1);
        return prev == (char)-1 || prev == '\n';
    }

    private int getIndentState() {
        assert isAfterEol();
        int currentIndentPos = yylength();
        for (int i = 0; i < yylength(); i+=1) {
            if (getCharAtOffset(i) == '\t') {
                currentIndentPos += 1;
            }
        }

        int lastIndentPos = this.indentPos[this.currentIndentLevel];
        //trace("=================");
        //System.out.println("lastIndentPos: " + lastIndentPos);
        //System.out.println("currentIndentPos: " + currentIndentPos);
        if (currentIndentPos > lastIndentPos) {
            if (this.currentIndentLevel == maxIndentLevel) {
                return ERROR_STATE;
            }
            this.currentIndentLevel ++;
            this.indentPos[this.currentIndentLevel] = currentIndentPos;
            return this.indentState[this.currentIndentLevel];

        } else if (currentIndentPos < lastIndentPos) {
            for (int i = 0; i < this.currentIndentLevel; i++) {
                if (this.indentPos[i] == currentIndentPos) {
                    this.currentIndentLevel = i;
                    return this.indentState[this.currentIndentLevel];
                }
            }
            return ERROR_STATE;
        }
        return this.indentState[this.currentIndentLevel];
    }

    //-------------------------------------------------------------------------------------------------------------------
    private void openBrace() {
        myBraceCount++;
        if (myBraceCount != 0) {
            yybegin(PLAIN_BLOCK_STATE);
        }
    }

    private void closeBrace() {
        if (myBraceCount > 0) {
            myBraceCount--;
        }
        if (myBraceCount == 0){
            yybegin(this.indentState[this.currentIndentLevel]);
        }
    }

    private void goToState(int state) {
        yybegin(state);
        yypushback(yylength());
    }

    //-------------------------------------------------------------------------------------------------------------------
    private void trace(String tag) {
        int tokenStart = getTokenStart();
        int tokenEnd = Math.min(tokenStart + 40, zzBuffer.length());
        System.out.println("====" + tag + "\n{{ " + zzBuffer.subSequence(tokenStart, tokenEnd) + " }}");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { this.currentIndentLevel = 0;
          goToState(ENTITY_STATE);
            }
          // fall through
          case 35: break;
          case 2:
            { yybegin(getIndentState());
          return INDENT;
            }
          // fall through
          case 36: break;
          case 3:
            { return TEXT;
            }
          // fall through
          case 37: break;
          case 4:
            { return WHITESPACE;
            }
          // fall through
          case 38: break;
          case 5:
            { return EOL;
            }
          // fall through
          case 39: break;
          case 6:
            { yybegin(LINE_START_STATE);
          return EOL;
            }
          // fall through
          case 40: break;
          case 7:
            { return COMMENT;
            }
          // fall through
          case 41: break;
          case 8:
            { return NAMESPACE_VALUE;
            }
          // fall through
          case 42: break;
          case 9:
            { return BAD_CHAR;
            }
          // fall through
          case 43: break;
          case 10:
            { return ENTITY_NAME;
            }
          // fall through
          case 44: break;
          case 11:
            { yybegin(WAITING_METAINFO_VALUE_STATE);
          return COLON;
            }
          // fall through
          case 45: break;
          case 12:
            { yybegin(WAITING_ATTR_ALIAS_NAME_STATE);
          return ATTR_NAME;
            }
          // fall through
          case 46: break;
          case 13:
            { return SUBPROP_NAME;
            }
          // fall through
          case 47: break;
          case 14:
            { yybegin(WAITING_SUBPROP_TYPE_STATE);
          return COLON;
            }
          // fall through
          case 48: break;
          case 15:
            { return OPEN_BRACKET;
            }
          // fall through
          case 49: break;
          case 16:
            { yybegin(WAITING_ENTITY_CLASS_STATE);
          return CLOSE_BRACKET;
            }
          // fall through
          case 50: break;
          case 17:
            { return ENTITY_ALIAS_NAME;
            }
          // fall through
          case 51: break;
          case 18:
            { return COMMA;
            }
          // fall through
          case 52: break;
          case 19:
            { return ENTITY_CLASS;
            }
          // fall through
          case 53: break;
          case 20:
            { return COLON;
            }
          // fall through
          case 54: break;
          case 21:
            { return CLOSE_BRACKET;
            }
          // fall through
          case 55: break;
          case 22:
            { return ATTR_ALIAS_NAME;
            }
          // fall through
          case 56: break;
          case 23:
            { yybegin(WAITING_ATTR_TYPE_STATE);
          return COLON;
            }
          // fall through
          case 57: break;
          case 24:
            { return ATTR_TYPE;
            }
          // fall through
          case 58: break;
          case 25:
            { return SUBPROP_TYPE;
            }
          // fall through
          case 59: break;
          case 26:
            { closeBrace();
          return CLOSE_PLAIN_BLOCK;
            }
          // fall through
          case 60: break;
          case 27:
            { return INHERITED;
            }
          // fall through
          case 61: break;
          case 28:
            { yybegin(PLAIN_BLOCK_STATE);
          return OPEN_PLAIN_BLOCK;
            }
          // fall through
          case 62: break;
          case 29:
            { goToState(WAITING_ENTITY_ALIAS_NAME_STATE);
            }
          // fall through
          case 63: break;
          case 30:
            { if (yystate() == ATTRMETA_STATE) {
              return ATTRMETA_TYPE;

          } else if (yystate() == SUBPROPMETA_STATE) {
              return SUBPROPMETA_TYPE;
          }
          return META_TYPE;
            }
          // fall through
          case 64: break;
          case 31:
            { return BUILDIN_TYPE;
            }
          // fall through
          case 65: break;
          case 32:
            { this.currentIndentLevel = 0;
          goToState(NAMESPACE_STATE);
            }
          // fall through
          case 66: break;
          case 33:
            { return NAMESPACE_MARKER;
            }
          // fall through
          case 67: break;
          case 34:
            { return ENTITY_BUILDIN_CLASS;
            }
          // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
