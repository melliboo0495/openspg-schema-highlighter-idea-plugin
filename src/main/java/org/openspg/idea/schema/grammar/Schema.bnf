{
    parserClass="org.openspg.idea.lang.parser.SchemaParser"
    parserUtilClass="org.openspg.idea.schema.grammar.SchemaParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Schema"
    psiImplClassSuffix="Impl"
    psiPackage="org.openspg.idea.lang.psi"
    psiImplPackage="org.openspg.idea.lang.psi.impl"

    elementTypeHolderClass="org.openspg.idea.grammar.psi.SchemaTypes"
    elementTypeClass="org.openspg.idea.schema.SchemaElementType"
    tokenTypeClass="org.openspg.idea.schema.psi.SchemaTokenType"

    psiImplUtilClass="org.openspg.idea.schema.psi.impl.SchemaPsiImplUtil"
}

schemaFile ::= item_*

private item_ ::= namespace|entity|DOCUMENT_END|COMMENT|BAD_CHAR|INDENT|WHITESPACE|EOL|TEXT

private plain_text_block ::= (OPEN_PLAIN_BLOCK (TEXT|EOL|WHITESPACE)* CLOSE_PLAIN_BLOCK)
private text_value ::= TEXT | plain_text_block
private EOL_ ::= (WHITESPACE | COMMENT | INDENT)* EOL

namespace ::= (NAMESPACE_MARKER WHITESPACE+ NAMESPACE_VALUE) {
    methods=[getValue]
}

entity ::= entity_info EOL_* (INDENT entity_meta)* {
    methods=[getName]
}

entity_info ::= ENTITY_NAME WHITESPACE* OPEN_BRACKET WHITESPACE* ENTITY_ALIAS_NAME WHITESPACE* CLOSE_BRACKET WHITESPACE* (basedEntityClass_|inheritedEntityClass_) {
    mixin="org.openspg.idea.schema.psi.impl.SchemaNamedElementImpl"
    implements="org.openspg.idea.schema.psi.SchemaNamedElement"
    methods=[getEntityName getEntityAliasName getEntityClassList getName setName getNameIdentifier]
}

private basedEntityClass_ ::= COLON WHITESPACE* ENTITY_BUILDIN_CLASS
private inheritedEntityClass_ ::= INHERITED WHITESPACE* ((ENTITY_CLASS WHITESPACE* COMMA WHITESPACE*)* ENTITY_CLASS) WHITESPACE* COLON

entity_meta ::= (META_TYPE WHITESPACE* COLON WHITESPACE* text_value*) EOL_* (INDENT attribute)* {
    methods=[getName]
}


attribute ::= attribute_info EOL_* (INDENT attribute_meta EOL_*)*

attribute_info ::= (ATTR_NAME WHITESPACE* OPEN_BRACKET WHITESPACE* ATTR_ALIAS_NAME WHITESPACE* CLOSE_BRACKET WHITESPACE* COLON WHITESPACE* (BUILDIN_TYPE | ATTR_TYPE))

attribute_meta ::= (ATTRMETA_TYPE WHITESPACE* COLON WHITESPACE* text_value*) EOL_* (INDENT sub_property)*


sub_property ::= sub_property_info EOL_* (INDENT sub_property_meta EOL_*)*

sub_property_info ::= (SUBPROP_NAME WHITESPACE* COLON WHITESPACE* (BUILDIN_TYPE | SUBPROP_TYPE))

sub_property_meta ::= (SUBPROPMETA_TYPE WHITESPACE* COLON WHITESPACE* text_value*)
